
/**
 * The GUI interface components for the software.
 * 
 * Copyright (C) 2013  Tyler Stacey
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>. 
 * 
 */

package imagefilter;

import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;

/**
 * The GUI interface components for the software.
 * 
 * @author Tyler Stacey, 201033446, tas384
 */
public class FilterApp extends javax.swing.JFrame {

    /**
     * Creates new form FilterApp
     */
    public FilterApp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fc = new javax.swing.JFileChooser();
        jToolBar1 = new javax.swing.JToolBar();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        bwButton = new javax.swing.JButton();
        sepiaButton = new javax.swing.JButton();
        resizeButton = new javax.swing.JButton();
        rotateButton = new javax.swing.JButton();
        negativeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        imageLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        colorFilter = new javax.swing.JMenu();
        bwMenuItem = new javax.swing.JMenuItem();
        negativeMenuItem = new javax.swing.JMenuItem();
        sepiaMenuItem = new javax.swing.JMenuItem();
        redMenuItem = new javax.swing.JMenuItem();
        blueMenuItem = new javax.swing.JMenuItem();
        greenMenuItem = new javax.swing.JMenuItem();
        Transform = new javax.swing.JMenu();
        resizeMenuItem = new javax.swing.JMenuItem();
        rotateMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("3718 - Image Filter");
        setMinimumSize(new java.awt.Dimension(500, 400));

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/actions/document-open.png"))); // NOI18N
        openButton.setToolTipText("Open");
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.setSize(new Dimension(40,40));
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(openButton);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/actions/document-save-as.png"))); // NOI18N
        saveButton.setToolTipText("Save As...");
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveButton);

        bwButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/BW.png"))); // NOI18N
        bwButton.setToolTipText("Black and White");
        bwButton.setFocusable(false);
        bwButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bwButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bwButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bwButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(bwButton);

        sepiaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/S.png"))); // NOI18N
        sepiaButton.setToolTipText("Sepia");
        sepiaButton.setFocusable(false);
        sepiaButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sepiaButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        sepiaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sepiaButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(sepiaButton);

        resizeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/actions/view-fullscreen.png"))); // NOI18N
        resizeButton.setToolTipText("Resize");
        resizeButton.setFocusable(false);
        resizeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        resizeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        resizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(resizeButton);

        rotateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/actions/edit-redo.png"))); // NOI18N
        rotateButton.setToolTipText("Rotate 90CW");
        rotateButton.setFocusable(false);
        rotateButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rotateButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rotateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(rotateButton);

        negativeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/filmstrip-icon.png"))); // NOI18N
        negativeButton.setToolTipText("Negative Effect");
        negativeButton.setFocusable(false);
        negativeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        negativeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        negativeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(negativeButton);

        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel.setAutoscrolls(true);
        jScrollPane1.setViewportView(imageLabel);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        toolsMenu.setMnemonic('T');
        toolsMenu.setText("Tools");

        colorFilter.setText("Color Filters");

        bwMenuItem.setText("Black & White");
        bwMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bwMenuItemActionPerformed(evt);
            }
        });
        colorFilter.add(bwMenuItem);

        negativeMenuItem.setText("Negative");
        negativeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativeMenuItemActionPerformed(evt);
            }
        });
        colorFilter.add(negativeMenuItem);

        sepiaMenuItem.setText("Sepia");
        sepiaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sepiaMenuItemActionPerformed(evt);
            }
        });
        colorFilter.add(sepiaMenuItem);

        redMenuItem.setText("Red Scale");
        redMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redMenuItemActionPerformed(evt);
            }
        });
        colorFilter.add(redMenuItem);

        blueMenuItem.setText("Blue Scale");
        blueMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueMenuItemActionPerformed(evt);
            }
        });
        colorFilter.add(blueMenuItem);

        greenMenuItem.setText("Green Scale");
        greenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenMenuItemActionPerformed(evt);
            }
        });
        colorFilter.add(greenMenuItem);

        toolsMenu.add(colorFilter);

        Transform.setText("Transform Image");

        resizeMenuItem.setText("Resize");
        resizeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeMenuItemActionPerformed(evt);
            }
        });
        Transform.add(resizeMenuItem);

        rotateMenuItem.setText("Rotate 90CW");
        rotateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateMenuItemActionPerformed(evt);
            }
        });
        Transform.add(rotateMenuItem);

        toolsMenu.add(Transform);

        menuBar.add(toolsMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        System.out.println("Viewing Image");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                filename = fc.getSelectedFile().getPath();
                bi = ImageIO.read(new File(filename));
                imageLabel.setIcon(new ImageIcon(bi));
                jScrollPane1.repaint();
                this.setSize(bi.getWidth(), bi.getHeight());
                this.repaint();
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }

        }
    }//GEN-LAST:event_openButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        System.out.println("Saving Image");
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fc.getSelectedFile();
                filename = fc.getSelectedFile().getPath();
                String suffix = getSuffix(filename);
                ImageIO.write(bi, suffix, file);
                System.out.println("Image Saved");
            } catch (IOException ex) {
                ex.printStackTrace();
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void rotateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateMenuItemActionPerformed
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                filename = fc.getSelectedFile().getPath();
                Rotate rotate = new Rotate(filename);
                rotate.convert();
                filename = rotate.resultName;
                bi = ImageIO.read(new File(filename));
                imageLabel.setIcon(new ImageIcon(bi));
                jScrollPane1.repaint();
                this.setSize(bi.getWidth(), bi.getHeight());
                this.repaint();
            } catch (Exception ex) {
                ex.printStackTrace();
                System.out.println(ex.getMessage());
            }

        }
    }//GEN-LAST:event_rotateMenuItemActionPerformed

    private void bwButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bwButtonActionPerformed
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                filename = fc.getSelectedFile().getPath();
                BW bw = new BW(filename);
                bw.convert();
                filename = bw.resultName;
                bi = ImageIO.read(new File(filename));
                imageLabel.setIcon(new ImageIcon(bi));
                jScrollPane1.repaint();
                this.setSize(bi.getWidth(), bi.getHeight());
                this.repaint();
            } catch (Exception ex) {
                ex.printStackTrace();
                System.out.println(ex.getMessage());
            }

        }
    }//GEN-LAST:event_bwButtonActionPerformed

    private void sepiaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sepiaButtonActionPerformed
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                filename = fc.getSelectedFile().getPath();
                Sepia s = new Sepia(filename);
                s.convert();
                filename = s.resultName;
                bi = ImageIO.read(new File(filename));
                imageLabel.setIcon(new ImageIcon(bi));
                jScrollPane1.repaint();
                this.setSize(bi.getWidth(), bi.getHeight());
                this.repaint();
            } catch (Exception ex) {
                ex.printStackTrace();
                System.out.println(ex.getMessage());
            }

        }
    }//GEN-LAST:event_sepiaButtonActionPerformed

    private void resizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeButtonActionPerformed
        String[] choices = {"25", "50", "75", "125", "150", "175", "200"};
        String input = (String) JOptionPane.showInputDialog(null, "Percent Scale",
                "Resize", JOptionPane.QUESTION_MESSAGE, null,
                choices, // Array of choices
                choices[0]); // Initial choice
        int scale = Integer.parseInt(input);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                filename = fc.getSelectedFile().getPath();
                Resize resize = new Resize(filename, scale);
                resize.convert();
                filename = resize.resultName;
                bi = ImageIO.read(new File(filename));
                imageLabel.setIcon(new ImageIcon(bi));
                jScrollPane1.repaint();
                this.setSize(bi.getWidth(), bi.getHeight());
                this.repaint();
            } catch (Exception ex) {
                ex.printStackTrace();
                System.out.println(ex.getMessage());
            }

        }
    }//GEN-LAST:event_resizeButtonActionPerformed

    private void rotateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateButtonActionPerformed
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                filename = fc.getSelectedFile().getPath();
                Rotate rotate = new Rotate(filename);
                rotate.convert();
                filename = rotate.resultName;
                bi = ImageIO.read(new File(filename));
                imageLabel.setIcon(new ImageIcon(bi));
                jScrollPane1.repaint();
                this.setSize(bi.getWidth(), bi.getHeight());
                this.repaint();
            } catch (Exception ex) {
                ex.printStackTrace();
                System.out.println(ex.getMessage());
            }

        }
    }//GEN-LAST:event_rotateButtonActionPerformed

    private void negativeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativeButtonActionPerformed
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                filename = fc.getSelectedFile().getPath();
                Negative n = new Negative(filename);
                n.convert();
                filename = n.resultName;
                bi = ImageIO.read(new File(filename));
                imageLabel.setIcon(new ImageIcon(bi));
                jScrollPane1.repaint();
                this.setSize(bi.getWidth(), bi.getHeight());
                this.repaint();
            } catch (Exception ex) {
                ex.printStackTrace();
                System.out.println(ex.getMessage());
            }

        }
    }//GEN-LAST:event_negativeButtonActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        System.out.println("Viewing Image");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                filename = fc.getSelectedFile().getPath();
                bi = ImageIO.read(new File(filename));
                imageLabel.setIcon(new ImageIcon(bi));
                jScrollPane1.repaint();
                this.setSize(bi.getWidth(), bi.getHeight());
                this.repaint();
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }

        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        System.out.println("Saving Image");
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fc.getSelectedFile();
                filename = fc.getSelectedFile().getPath();
                String suffix = getSuffix(filename);
                ImageIO.write(bi, suffix, file);
                System.out.println("Image Saved");
            } catch (IOException ex) {
                ex.printStackTrace();
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void bwMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bwMenuItemActionPerformed
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                filename = fc.getSelectedFile().getPath();
                BW bw = new BW(filename);
                bw.convert();
                filename = bw.resultName;
                bi = ImageIO.read(new File(filename));
                imageLabel.setIcon(new ImageIcon(bi));
                jScrollPane1.repaint();
                this.setSize(bi.getWidth(), bi.getHeight());
                this.repaint();
            } catch (Exception ex) {
                ex.printStackTrace();
                System.out.println(ex.getMessage());
            }

        }
    }//GEN-LAST:event_bwMenuItemActionPerformed

    private void sepiaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sepiaMenuItemActionPerformed
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                filename = fc.getSelectedFile().getPath();
                Sepia s = new Sepia(filename);
                s.convert();
                filename = s.resultName;
                bi = ImageIO.read(new File(filename));
                imageLabel.setIcon(new ImageIcon(bi));
                jScrollPane1.repaint();
                this.setSize(bi.getWidth(), bi.getHeight());
                this.repaint();
            } catch (Exception ex) {
                ex.printStackTrace();
                System.out.println(ex.getMessage());
            }

        }
    }//GEN-LAST:event_sepiaMenuItemActionPerformed

    private void redMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redMenuItemActionPerformed
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                filename = fc.getSelectedFile().getPath();
                Red r = new Red(filename);
                r.convert();
                filename = r.resultName;
                bi = ImageIO.read(new File(filename));
                imageLabel.setIcon(new ImageIcon(bi));
                jScrollPane1.repaint();
                this.setSize(bi.getWidth(), bi.getHeight());
                this.repaint();
            } catch (Exception ex) {
                ex.printStackTrace();
                System.out.println(ex.getMessage());
            }

        }
    }//GEN-LAST:event_redMenuItemActionPerformed

    private void blueMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueMenuItemActionPerformed
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                filename = fc.getSelectedFile().getPath();
                Blue b = new Blue(filename);
                b.convert();
                filename = b.resultName;
                bi = ImageIO.read(new File(filename));
                imageLabel.setIcon(new ImageIcon(bi));
                jScrollPane1.repaint();
                this.setSize(bi.getWidth(), bi.getHeight());
                this.repaint();
            } catch (Exception ex) {
                ex.printStackTrace();
                System.out.println(ex.getMessage());
            }

        }
    }//GEN-LAST:event_blueMenuItemActionPerformed

    private void greenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenMenuItemActionPerformed
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                filename = fc.getSelectedFile().getPath();
                Green g = new Green(filename);
                g.convert();
                filename = g.resultName;
                bi = ImageIO.read(new File(filename));
                imageLabel.setIcon(new ImageIcon(bi));
                jScrollPane1.repaint();
                this.setSize(bi.getWidth(), bi.getHeight());
                this.repaint();
            } catch (Exception ex) {
                ex.printStackTrace();
                System.out.println(ex.getMessage());
            }

        }
    }//GEN-LAST:event_greenMenuItemActionPerformed

    private void resizeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeMenuItemActionPerformed
        String[] choices = {"25", "50", "75", "125", "150", "175", "200"};
        String input = (String) JOptionPane.showInputDialog(null, "Percent Scale",
                "Resize", JOptionPane.QUESTION_MESSAGE, null,
                choices, // Array of choices
                choices[0]); // Initial choice
        int scale = Integer.parseInt(input);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                filename = fc.getSelectedFile().getPath();
                Resize resize = new Resize(filename, scale);
                resize.convert();
                filename = resize.resultName;
                bi = ImageIO.read(new File(filename));
                imageLabel.setIcon(new ImageIcon(bi));
                jScrollPane1.repaint();
                this.setSize(bi.getWidth(), bi.getHeight());
                this.repaint();
            } catch (Exception ex) {
                ex.printStackTrace();
                System.out.println(ex.getMessage());
            }

        }
    }//GEN-LAST:event_resizeMenuItemActionPerformed

    private void negativeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativeMenuItemActionPerformed
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                filename = fc.getSelectedFile().getPath();
                Negative n = new Negative(filename);
                n.convert();
                filename = n.resultName;
                bi = ImageIO.read(new File(filename));
                imageLabel.setIcon(new ImageIcon(bi));
                jScrollPane1.repaint();
                this.setSize(bi.getWidth(), bi.getHeight());
                this.repaint();
            } catch (Exception ex) {
                ex.printStackTrace();
                System.out.println(ex.getMessage());
            }

        }
    }//GEN-LAST:event_negativeMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, 
"  Copyright (C) 2013  Tyler Stacey\n" +
"  \n" +
"  This program is free software: you can redistribute it and/or modify\n" +
"  it under the terms of the GNU General Public License as published by\n" +
"  the Free Software Foundation, either version 3 of the License, or\n" +
"  (at your option) any later version.\n" +
"  \n" +
"  This program is distributed in the hope that it will be useful,\n" +
"  but WITHOUT ANY WARRANTY; without even the implied warranty of\n" +
"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n" +
"  GNU General Public License for more details.\n" +
"  \n" +
"  You should have received a copy of the GNU General Public License\n" +
"  along with this program.  If not, see <http://www.gnu.org/licenses/>.");
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FilterApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FilterApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FilterApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FilterApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FilterApp().setVisible(true);
            }
        });
    }
    private String filename;
    private BufferedImage bi;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Transform;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem blueMenuItem;
    private javax.swing.JButton bwButton;
    private javax.swing.JMenuItem bwMenuItem;
    private javax.swing.JMenu colorFilter;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JFileChooser fc;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem greenMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton negativeButton;
    private javax.swing.JMenuItem negativeMenuItem;
    private javax.swing.JButton openButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem redMenuItem;
    private javax.swing.JButton resizeButton;
    private javax.swing.JMenuItem resizeMenuItem;
    private javax.swing.JButton rotateButton;
    private javax.swing.JMenuItem rotateMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton sepiaButton;
    private javax.swing.JMenuItem sepiaMenuItem;
    private javax.swing.JMenu toolsMenu;
    // End of variables declaration//GEN-END:variables

    /**
     * getSuffix gets the file type.
     *
     * @param name name of the file
     * @return the filetype as a string
     */
    public static String getSuffix(String name) {
        int last = name.lastIndexOf('.');
        if (last == -1) {
            return "";
        }
        return name.substring(last + 1);
    }
}

class MyFilter extends javax.swing.filechooser.FileFilter {

    @Override
    public boolean accept(File file) {

        if (file.isDirectory()) {
            return true;
        }

        String filename = file.getName();
        return filename.endsWith(".jpg") || filename.endsWith(".jpeg") || filename.endsWith(".png");
    }

    @Override
    public String getDescription() {
        return "*.img";
    }
}